  281  docker ps
  282  docker ps
  283  docker ps --all
  284  docker ps --all
  285  docker system prune
  286  docker ps --all
  287  docker --help
  288  docker create busybox echo hi there
  289  docker start 3ba353334173062f7236936e7da05f4c60420f3cd64e3a14ee0f1c029cb15ff0
  290  docker log 3ba353334173062f7236936e7da05f4c60420f3cd64e3a14ee0f1c029cb15ff0
  291  docker logs 3ba353334173062f7236936e7da05f4c60420f3cd64e3a14ee0f1c029cb15ff0
  292  docker prune all
  293  docker create busybox ping google.,com
  294  docker start 0ff13a0d52c9db43f564bade8c92485099110935a2ef6a4290feb0bbde934b1b
  295   docker logs 0ff13a0d52c9db43f564bade8c92485099110935a2ef6a4290feb0bbde934b1b
  296  docker ps
  297  docker create ping google.com
  298  docker ps
  299  docker create busybox ping google.com
  300  docker start 2689552bc81bed376cb8bbdb8b5d4e95a79f4b740905a6e4e26c5d458c9bcf66
  301  docker log 2689552bc81bed376cb8bbdb8b5d4e95a79f4b740905a6e4e26c5d458c9bcf66
  302  docker logs 2689552bc81bed376cb8bbdb8b5d4e95a79f4b740905a6e4e26c5d458c9bcf66
  303  docker ps
  304  docker ps
  305  docker stop 2689552bc81bed376cb8bbdb8b5d4e95a79f4b740905a6e4e26c5d458c9bcf66
  306  docker ps
  307  docker ps
  308  docker --help
  309  docker images
  310  docker images --help
  311  docker run redis
  441  docker buid -t mttlong/visits:latest .
  442  docker build -t mttlong/visits:latest .
  443  docker build -t mttlong/visits:latest .
  444  docker build -t mttlong/visits:latest .
  445   pwd
  446  ls
  447  docker-compose up
  451  docker-compose up --build
  452  docker build .
  458  docker-compose up --build
  468  docker-compose up -d
  469  docker-compose down

  # This docker command runs the container with port mapping (3000 to 3000) with the volume flags
  # -v /app/node_modules is to configure the container to use this folder and this folder only
  # -v $(pwd):/app is to configure the container to map the currrent directory (as in $pwd) to the current working directory
  docker run -p 3000:3000 -v /app/node_modules -v $(pwd):/app d732e4599ea3 

# This docker command is to get into the unix shell to peek into its working directory. Container must be up and running for this to work.
docker exec -it 783766d91d14 sh

# This docker command builds the image, -f to specify the development Dockerfile, -t to tag the container ID. 
# The period at the end is to specify the current directory. 
docker build -f Dockerfile.dev -t mttlong/reactwebapp .

# This docker command runs the container's test suite
docker run -it mttlong/reactwebapp npm run test

#How to deploy to Google Cloud Platform
  174  gcloud config set project $PROJECT_ID
  175  gcloud config set compute/zone us-central1-b
  176  gcloud auth configure-docker
  177  docker run --rm -p 8080:8080 gcr.io/${PROJECT_ID}/hello-app:v1
  178  gcloud container clusters create hello-cluster --num-nodes=3
  179  gcloud compute instances list
  180  kubectl run hello-web --image=gcr.io/${PROJECT_ID}/hello-app:v1 --port 8080
  181  kubectl get pods
  182  kubectl expose deployment hello-web --type=LoadBalancer --port 80 --target-port 8080
  183  kubectl get service
  184  kubectl delete service hello-web
  185  gcloud container clusters delete hello-cluster
  186  gcloud config set project genuine-ether-223804
  187  gcloud config set compute/zone us-central1-b
  188  docker run -rm -p 8080:8080 gcr.io/genuine-ether-223804/node-web-app
  189  docker run --rm -p 8080:8080 gcr.io/genuine-ether-223804/node-web-app
  190  gcloud container clusters create hello-cluster --num-nodes=3
  191  gcloud compute instances list
  192  gcloud container clusters get-credentials hello-cluster
  193  kubectl run hello-web --image=gcr.io/genuine-ether-223804/node-web-app --port 8080
  194  kubectl get pods
  195  kubectl expose deployment hello-web --type=LoadBalancer --port 80 --target-port 8080
  196  kubectl get service
  197  kubectl delete service hello-web
  198  gcloud container clusters delete hello-cluster
